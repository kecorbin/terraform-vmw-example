import "tfplan"

find_resources_from_plan = func(type) {

	resources = {}

	# Iterate over all modules in the tfplan import
	for tfplan.module_paths as path {
		# Iterate over the named resources of desired type in the module
		for tfplan.module(path).resources[type] else {} as name, instances {
			# Iterate over resource instances
			for instances as index, r {

				# Get the address of the instance
				if length(path) == 0 {
					# root module
					address = type + "." + name + "[" + string(index) + "]"
				} else {
					# non-root module
					address = "module." + strings.join(path, ".module.") + "." +
						type +
							"." +
								name +
									"[" +
										string(index) +
											"]"
										}

										# Add the instance to resources map, setting the key to the address
										resources[address] = r
									}
								}
							}

							return resources
}
					

dv_switches = find_resources_from_plan("vsphere_distributed_virtual_switch")

valid_dvs_config = true

for dv_switches as address, r {

	# Skip resource instances that are being destroyed
	# to avoid unnecessary policy violations.
	# Used to be: if length(r.diff) == 0
	if r.destroy and not r.requires_new {
		print("Skipping resource", address, "that is being destroyed.")
		continue
	}
	
	# baseline dvs security policies
	if r.applied.allow_promiscuous else false {
		print("Promiscuous model is not allowed")
		valid_dvs_config = false
	}
	if r.applied.allow_mac_changes else false {
		print("MAC changes not allowed")
		valid_dvs_config = false
	} 
	if r.applied.allow_forged_transmits else false {
		print("Forged Transmits not allowed")
		valid_dvs_config = false
	} 
	
}
main = rule {
	valid_dvs_config
}